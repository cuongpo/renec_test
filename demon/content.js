"use strict";(()=>{var O={SEND_TRANSACTION:"send-transaction",SIGN_TRANSACTION:"sign-transaction",SIGN_TRANSACTIONS:"sign-transactions",SIGN_MESSAGE:"sign-message"},g={...O,CONNECT:"connect"};var E="demon-channel-solana-content-script-request",_="demon-channel-solana-content-script-response";var u="demon-channel-solana-webpage-request",l="demon-channel-solana-webpage-response",A="demon-channel-notification",T="demon-channel-content-script";var m="demon-get-extension-id";var N="demon-get-dapp-connected";var i=class{_responseResolvers={};_requestId=1;_requestChannel;_responseChannel;constructor(e,n){this._requestChannel=e,this._responseChannel=n,this._requestId=0,this._responseResolvers={},this._initChannels()}_initChannels(){document.addEventListener(this._responseChannel,this._handleRpcResponse.bind(this))}_handleRpcResponse(e){let{id:n,result:t,error:r}=e.detail,o=this._responseResolvers[n];if(!o)throw console.error("unexpected event",e),new Error("unexpected event");delete this._responseResolvers[n];let[c,R]=o;r?R(new Error(r)):c(t)}_addResponseResolver(e){let n,t,r=new Promise((o,c)=>{n=o,t=c});return this._responseResolvers[e]=[n,t],[r,n,t]}async request({method:e,params:n}){let t=this._requestId;this._requestId+=1;let[r]=this._addResponseResolver(t),o={id:t,method:e,params:n},c=new CustomEvent(this._requestChannel,{detail:o});return document.dispatchEvent(c),await r}static async sendResponse(e,n){let t=new CustomEvent(e,{detail:n});document.dispatchEvent(t)}static subscribeRequest(e,n){document.addEventListener(e,t=>{n(t.detail)})}};var p=class{static sendMessageToExtensionFromWebpage(e,n,t){chrome.runtime.sendMessage(e,n,t)}static sendMessageToAnywhereInExtension(e,n){chrome.runtime.sendMessage(e,n)}static addEventListenerFromAnywhereInExtension(e){return chrome.runtime.onMessage.addListener(e)}static addEventListenerFromWebpage(e){return chrome.runtime.onMessageExternal.addListener(e)}static async getLastFocusedWindow(){return new Promise(e=>{chrome.windows.getLastFocused(e)})}static closeWindow(e){e!==void 0&&chrome.windows.remove(e)}};var d=class{static proxyReverse(e,n){n&&window.addEventListener("message",t=>{t.data.type===n&&p.sendMessageToAnywhereInExtension({channel:n,data:t.data.detail})}),p.addEventListenerFromAnywhereInExtension((t,r,o)=>{t.channel===e&&(o({result:"success"}),window.postMessage({type:e,detail:t.data},"*"))})}};var S=new i(u,l);function C(){h("inpage.js"),L(),y()}function h(s){try{let e=document.createElement("script");e.src=chrome.runtime.getURL(s),e.onload=function(){e.remove()},(document.head||document.documentElement).appendChild(e)}catch(e){console.error("provider injection failed.",e)}}function L(){i.subscribeRequest(E,x),chrome.runtime.onMessage.addListener(async(s,e,n)=>{s.channel===T&&s.data?.name===N&&n(await I())})}async function I(){return await S.request({method:N})}function x(s){switch(s.method){case m:i.sendResponse(_,{id:s.id,result:chrome.runtime.id});break;default:break}}function y(){d.proxyReverse(A)}C();})();
//# sourceMappingURL=data:application/json;base64,
